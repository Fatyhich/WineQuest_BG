version: '3'

services:
  redis:
    image: redis:7.0
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  api:
    build: .
    command: gunicorn --bind 0.0.0.0:5000 app:app --workers 3 --timeout 120
    volumes:
      - ./uploads:/app/uploads
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - UPLOAD_FOLDER=/app/uploads
      - DEBUG=False
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  worker:
    build: .
    command: celery -A celery_worker.celery_app worker --loglevel=info
    volumes:
      - ./uploads:/app/uploads
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - UPLOAD_FOLDER=/app/uploads
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_started
    deploy:
      replicas: ${WORKER_COUNT:-2}
    restart: unless-stopped

#   web:
#     build: .
#     env_file:
#       - .env       # loads OPENWEATHER_API_KEY (and any other vars)
#     volumes:
#       - ./uploads:/app/uploads   # so your app.py / weather_service can write/read
#       - .:/app                   # if you want code auto-reloads in dev
#     command: flask run --host=0.0.0.0
#     ports:
#       - "5000:5000"
#     depends_on:
#       - redis
#       - api
#       - worker

volumes:
  redis-data:
